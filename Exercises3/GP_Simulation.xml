<?xml version="1.0" encoding="utf-8"?>
<mscript xmlns:mwsh="http://www.mathworks.com/namespace/mcode/v1/syntaxhighlight.dtd">
   <version>9.5</version>
   <release>2018b</release>
   <date>2019-03-30</date>
   <cell style="overview">
      <count>1</count>
      <steptitle style="document">SIMULATE A GAUSSIAN PROCESS</steptitle>
      <text>
         <p>This code is intended to simulate a Gaussian Process and test sweeping over the hyperparameters</p>
      </text>
      <cellOutputTarget>1</cellOutputTarget>
   </cell>
   <cell>
      <count>2</count>
      <mcode>%Initialize Params
clear;
reps = 3;
numofpoints = 200;
data = rand(1,numofpoints);
data = sort(data);
tau1sq = 0.01;
tau2sq = 1e-6;
b = 0.1;
tau1sq_sweep = [0.01, 0.1, 1];
tau2sq_sweep = [1e-6, 1e-3, 1];
b_sweep = [0.1, 0.3, 1];
%%Simulation Phase
% Simulate GP 3 times with default hyperparams
for i = 1:reps
    res = GaussProc(data, b, tau1sq, tau2sq, @CovSqExp);
    plot(data, res);
    hold on;
end
title('GP Simulation with Default Vals');
%Simulation for varying b
figure(1);
for i = 1:length(b_sweep)
    res = GaussProc(data, b_sweep(i), tau1sq, tau2sq, @CovMat52);
    scatter(data, res);
    legendinfo{i} = ['b = ' num2str(b_sweep(i))];
    hold on;
end
title('varying b');
legend(legendinfo);

%Simulation for varying tau1sq
figure(2);
for i = 1:length(tau1sq_sweep)
    res = GaussProc(data, b, tau1sq_sweep(i), tau2sq, @CovMat52);
    scatter(data, res);
    hold on;
    legendinfo{i} = ['tau1sq = ' num2str(tau1sq_sweep(i))];
end
title('varying tau1sq')
legend(legendinfo);

%Simulation for varying tau2sq
figure(3);
for i = 1:length(tau2sq_sweep)
    res = GaussProc(data, b, tau2sq_sweep(i), tau1sq, @CovMat52);
    plot(data, res);
    hold on;
    legendinfo{i} = ['tau2sq = ' num2str(tau2sq_sweep(i))];
end
title('varying tau2sq')
legend(legendinfo);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">%Initialize Params</mwsh:comments>
clear;
reps = 3;
numofpoints = 200;
data = rand(1,numofpoints);
data = sort(data);
tau1sq = 0.01;
tau2sq = 1e-6;
b = 0.1;
tau1sq_sweep = [0.01, 0.1, 1];
tau2sq_sweep = [1e-6, 1e-3, 1];
b_sweep = [0.1, 0.3, 1];
<mwsh:comments xml:space="preserve">%%Simulation Phase</mwsh:comments>
<mwsh:comments xml:space="preserve">% Simulate GP 3 times with default hyperparams</mwsh:comments>
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:reps
    res = GaussProc(data, b, tau1sq, tau2sq, @CovSqExp);
    plot(data, res);
    hold <mwsh:strings xml:space="preserve">on</mwsh:strings>;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
title(<mwsh:strings xml:space="preserve">'GP Simulation with Default Vals'</mwsh:strings>);
<mwsh:comments xml:space="preserve">%Simulation for varying b</mwsh:comments>
figure(1);
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:length(b_sweep)
    res = GaussProc(data, b_sweep(i), tau1sq, tau2sq, @CovMat52);
    scatter(data, res);
    legendinfo{i} = [<mwsh:strings xml:space="preserve">'b = '</mwsh:strings> num2str(b_sweep(i))];
    hold <mwsh:strings xml:space="preserve">on</mwsh:strings>;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
title(<mwsh:strings xml:space="preserve">'varying b'</mwsh:strings>);
legend(legendinfo);

<mwsh:comments xml:space="preserve">%Simulation for varying tau1sq</mwsh:comments>
figure(2);
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:length(tau1sq_sweep)
    res = GaussProc(data, b, tau1sq_sweep(i), tau2sq, @CovMat52);
    scatter(data, res);
    hold <mwsh:strings xml:space="preserve">on</mwsh:strings>;
    legendinfo{i} = [<mwsh:strings xml:space="preserve">'tau1sq = '</mwsh:strings> num2str(tau1sq_sweep(i))];
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
title(<mwsh:strings xml:space="preserve">'varying tau1sq'</mwsh:strings>)
legend(legendinfo);

<mwsh:comments xml:space="preserve">%Simulation for varying tau2sq</mwsh:comments>
figure(3);
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:length(tau2sq_sweep)
    res = GaussProc(data, b, tau2sq_sweep(i), tau1sq, @CovMat52);
    plot(data, res);
    hold <mwsh:strings xml:space="preserve">on</mwsh:strings>;
    legendinfo{i} = [<mwsh:strings xml:space="preserve">'tau2sq = '</mwsh:strings> num2str(tau2sq_sweep(i))];
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>
title(<mwsh:strings xml:space="preserve">'varying tau2sq'</mwsh:strings>)
legend(legendinfo);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>1</mcode-count>
      <cellOutputTarget>2</cellOutputTarget>
   </cell>
   <cell>
      <count>3</count>
      <text>
         <p>
            <b>Used Functions</b>
         </p>
      </text>
      <mcode>function res = GaussProc(inputData, b, Tau1sq, Tau2sq, covFunc)
    n = size(inputData, 2);
    meanFx = zeros(1,n);
    covFx = zeros(n);

    for i = 1:n
        for j = 1:n
            covFx(i,j) = covFunc(inputData(:,i), inputData(:,j), b, Tau1sq, Tau2sq);
        end
    end
    res = mvnrnd(meanFx,covFx);
end

function res = CovSqExp(x1, x2, b, tau1sq, tau2sq)
    dist = norm(x1 - x2);
    kronecker = isequal(x1, x2);
    res = tau1sq * exp( -0.5 * (dist/b)^2 ) + tau2sq *kronecker;
end

function res = CovMat52(x1, x2, b, tau1sq, tau2sq)
    dist = norm(x1 - x2);
    kronecker = isequal(x1, x2);
    expterm = exp(-sqrt(5)*dist/b);
    taylorterm = 1 + sqrt(5)*dist/b + 5 * dist^2/(3*b^2);
    res = tau1sq*taylorterm*expterm + tau2sq*kronecker;
end</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:keywords xml:space="preserve">function</mwsh:keywords> res = GaussProc(inputData, b, Tau1sq, Tau2sq, covFunc)
    n = size(inputData, 2);
    meanFx = zeros(1,n);
    covFx = zeros(n);

    <mwsh:keywords xml:space="preserve">for</mwsh:keywords> i = 1:n
        <mwsh:keywords xml:space="preserve">for</mwsh:keywords> j = 1:n
            covFx(i,j) = covFunc(inputData(:,i), inputData(:,j), b, Tau1sq, Tau2sq);
        <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
    res = mvnrnd(meanFx,covFx);
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:keywords xml:space="preserve">function</mwsh:keywords> res = CovSqExp(x1, x2, b, tau1sq, tau2sq)
    dist = norm(x1 - x2);
    kronecker = isequal(x1, x2);
    res = tau1sq * exp( -0.5 * (dist/b)^2 ) + tau2sq *kronecker;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:keywords xml:space="preserve">function</mwsh:keywords> res = CovMat52(x1, x2, b, tau1sq, tau2sq)
    dist = norm(x1 - x2);
    kronecker = isequal(x1, x2);
    expterm = exp(-sqrt(5)*dist/b);
    taylorterm = 1 + sqrt(5)*dist/b + 5 * dist^2/(3*b^2);
    res = tau1sq*taylorterm*expterm + tau2sq*kronecker;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords></mwsh:code>
      </mcode-xmlized>
      <mcode-count>2</mcode-count>
      <cellOutputTarget>3</cellOutputTarget>
      <img src="GP_01.png"/>
      <img src="GP_02.png"/>
      <img src="GP_03.png"/>
      <img src="GP_04.png"/>
   </cell>
   <originalCode>%% SIMULATE A GAUSSIAN PROCESS
% This code is intended to simulate a Gaussian Process and test sweeping
% over the hyperparameters
%% 
%Initialize Params
clear;
reps = 3;
numofpoints = 200;
data = rand(1,numofpoints);
data = sort(data);
tau1sq = 0.01;
tau2sq = 1e-6;
b = 0.1;
tau1sq_sweep = [0.01, 0.1, 1];
tau2sq_sweep = [1e-6, 1e-3, 1];
b_sweep = [0.1, 0.3, 1];
%%Simulation Phase
% Simulate GP 3 times with default hyperparams
for i = 1:reps
    res = GaussProc(data, b, tau1sq, tau2sq, @CovSqExp);
    plot(data, res);
    hold on;
end
title('GP Simulation with Default Vals');
%Simulation for varying b
figure(1);
for i = 1:length(b_sweep)
    res = GaussProc(data, b_sweep(i), tau1sq, tau2sq, @CovMat52);
    scatter(data, res);
    legendinfo{i} = ['b = ' num2str(b_sweep(i))];
    hold on;
end
title('varying b');
legend(legendinfo);

%Simulation for varying tau1sq
figure(2);
for i = 1:length(tau1sq_sweep)
    res = GaussProc(data, b, tau1sq_sweep(i), tau2sq, @CovMat52);
    scatter(data, res);
    hold on;
    legendinfo{i} = ['tau1sq = ' num2str(tau1sq_sweep(i))];
end
title('varying tau1sq')
legend(legendinfo);

%Simulation for varying tau2sq
figure(3);
for i = 1:length(tau2sq_sweep)
    res = GaussProc(data, b, tau2sq_sweep(i), tau1sq, @CovMat52);
    plot(data, res);
    hold on;
    legendinfo{i} = ['tau2sq = ' num2str(tau2sq_sweep(i))];
end
title('varying tau2sq')
legend(legendinfo);

%% 
% *Used Functions*


function res = GaussProc(inputData, b, Tau1sq, Tau2sq, covFunc)
    n = size(inputData, 2);
    meanFx = zeros(1,n);
    covFx = zeros(n);
    
    for i = 1:n
        for j = 1:n
            covFx(i,j) = covFunc(inputData(:,i), inputData(:,j), b, Tau1sq, Tau2sq);
        end
    end
    res = mvnrnd(meanFx,covFx);
end

function res = CovSqExp(x1, x2, b, tau1sq, tau2sq)
    dist = norm(x1 - x2);
    kronecker = isequal(x1, x2);
    res = tau1sq * exp( -0.5 * (dist/b)^2 ) + tau2sq *kronecker;
end

function res = CovMat52(x1, x2, b, tau1sq, tau2sq)
    dist = norm(x1 - x2);
    kronecker = isequal(x1, x2);
    expterm = exp(-sqrt(5)*dist/b);
    taylorterm = 1 + sqrt(5)*dist/b + 5 * dist^2/(3*b^2);
    res = tau1sq*taylorterm*expterm + tau2sq*kronecker;
end
</originalCode>
   <m-file>GP</m-file>
   <filename>/Users/afbudak/Desktop/Spring 2019/Statistical Modeling II/Exercises 3/GP.m</filename>
   <outputdir>/Users/afbudak/Desktop/Spring 2019/Statistical Modeling II/Exercises 3/html</outputdir>
</mscript>